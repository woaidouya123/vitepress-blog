[{"title":"CSS——设置页面整体变为灰色","link":"./notes/CSS——设置页面整体变为灰色","time":"2023-04-06 13:23:20","tags":["CSS"],"desc":"\n                  应用于一些特殊的地方，比如设置怀念模式等。body>* {    filter: grayscale(100%);    -webkit-filter: grayscale(100%);    -moz-filter: grayscale(100%);    -ms-filter: grayscale(100%);    -o-filter: grayscale(100%);...\n              "},{"title":"echarts图表设置全局颜色","link":"./notes/echarts图表设置全局颜色","time":"2023-03-20 11:03:04","tags":["js","echarts","图表","全局颜色"],"desc":"\n                  当项目需要定制echarts图表的颜色时，可以采用以下两种方法：1.使用官方的主题定制工具可以在基本配置里面修改颜色和顺序在官方提供的构建工具里还可以其他各种配置的定制选择。2.如果只是简单的改变颜色，并且你也已经准备好了颜色代码，那么可以通过直接修改本地加载的echarts.js或者echarts.min.js文件来修改全局颜色。打开js文件，全文搜索globalD...\n              "},{"title":"JS实现宫格拖动动画效果","link":"./notes/JS实现宫格拖动动画效果","time":"2023-03-16 08:40:57","tags":["JS","拖动","动画","宫格"],"desc":"\n                  效果图如下：html布局：<!DOCTYPE html><html><head>\t<title>dragLabel</title>\t<meta charset=\"utf-8\"></head><body>\t<div class=\"container\">\t\t<...\n              "},{"title":"sass中@import导入混淆指令文件无效的原因","link":"./notes/sass中@import导入混淆指令文件无效的原因","time":"2023-02-23 17:48:13","tags":["css","sass","混淆指令","mixin"],"desc":"\n                  Sass 拓展了@import的功能，允许其导入 SCSS 或 Sass 文件。被导入的文件将合并编译到同一个 CSS 文件中，另外，被导入的文件中所包含的变量或者混合指令 (mixin) 都可以在导入的文件中使用。但在以下情况下，@import仅作为普通的 CSS 语句，不会导入任何 Sass 文件。文件拓展名是.css；\t文件名以http://开头；\t文件名是url()；\t@import包含 media queries。如果不在上述情况内，文件的拓展名是.scss或...\n              "},{"title":"JSCSS实现滚动时间样式","link":"./notes/JSCSS实现滚动时间样式","time":"2023-02-17 16:12:29","tags":["时间滚动","JS","CSS"],"desc":"\n                  效果图：动画实现的方案是缩减上方div的高度带动整体上滑，然后用Js操作dom将最上方的div移到最下方。主要css:.continer {    display: flex;    justify - content: center;    align - items: center;    font - size: 40 px;}.scroll {    wi...\n              "},{"title":"使用Grid布局制作拼图小游戏","link":"./notes/使用Grid布局制作拼图小游戏","time":"2023-01-09 14:58:42","tags":["CSS","grid","拼图"],"desc":"\n                  在学习grid布局时突发奇想利用这个布局的特性做一个拼图小游戏先简单实现了一个demo,后期再优化，效果如下图：先上一下主要的css样式.container {        display: inline-grid;        grid-template-columns: repeat(3, 100px);        grid-template-rows: rep...\n              "},{"title":"记录贴——Jenkins自动化构建工具安装","link":"./notes/记录贴——Jenkins自动化构建工具安装","time":"2022-12-09 11:31:02","tags":["jenkins","自动化部署","java"],"desc":"\n                  1.环境准备1.1centos71.2jdk安装可见链接2.安装sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.reposudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.keyyum install jenkins修改配置文件vim /etc/sysconfig/j.\n              "},{"title":"图片列表页面的加载优化","link":"./notes/图片列表页面的加载优化","time":"2022-11-27 19:48:55","tags":["图片加载优化","js","javascript","img"],"desc":"\n                  起因源于文件拍照的列表页预览图，由于图片过大，后端设计时又没有考虑到略缩图的设计，原图片加载时会有加载到一半图片截断的显示效果，为避免这种显示问题，决定使用默认图片填充和js隐式加载图片的方式。方案1.为每个img标签添加统一默认的src指向默认显示的小图，同时为每个标签赋值data-original属性指向图片真正的地址2.页面加载完毕时，针对每一个img标签，创建一个隐藏img标签加载其data-original属性指向的图片，加载完毕后将该img标签src属性修改指向正确的图片地址。demo\n              "},{"title":"vitepress解析展示LaTeX数学公式","link":"./notes/vitepress解析展示LaTeX数学公式","time":"2022-10-12 10:18:10","tags":["javascript","前端","vue.js","vitepress"],"desc":"\n                  vitepress默认的md解析器不支持LaTeX数学公式的解析展示，需要安装扩展插件，本文章主要为记录一下为vitepress配置数学公式解析插件的过程，其中主要踩坑是由于插件生成的特殊标签不支持导致的编译报错，可通过修改vitepress配置对自定义标签进行单独配置进行解决。\n              "},{"title":"关于echarts生成地图的二三事","link":"./notes/关于echarts生成地图的二三事","time":"2022-09-19 09:27:02","tags":["echarts","地图","可视化"],"desc":"\n                  1.地图数据的获取中国地图及各省市县地图可在地图选择器（数据来源于高德开放平台）选择需要的区域，右方可下载其JSON API格式的数据。2.地图的编辑特定需求下需要对原有地图数据进行修改，如：添加某一非行政区划的地区，特定地区的分割或边缘优化，由于地图数据由横纵坐标组成的点形成，无法直接修改，推荐使用地图修改工具进行修改。地图在线编辑工具如图，将地图的JSON数据复制进右面编辑框，在左边可视化窗口进行编辑后，可获得编辑完后的地图数据。3.地图的声明想要在echarts中.\n              "},{"title":"使用JS判断日期的有效性","link":"./notes/使用JS判断日期的有效性","time":"2022-09-15 19:33:20","tags":["JS","Date","日期有效性"],"desc":"\n                  为了方便，这里使用的是yyyy/MM/dd 格式的日期。一般策略：将年月日分别取出，根据是否闰年和每月的日期进行判断。function judgeDate(date){\tconst rmons = [31,29,31,30,31,30,31,31,30,31,30,31],\t\t  pmons = [31,28,31,30,31,30,31,31,30,31,30,31];\tv...\n              "},{"title":"JSCSS实现自定义页面滚动条","link":"./notes/JSCSS实现自定义页面滚动条","time":"2022-03-29 20:42:18","tags":["JS","CSS","滚动条"],"desc":"\n                  效果图如下：首先隐藏原生的滚动条（仅限chrome浏览器）html::-webkit-scrollbar{    display: none;}通过JS监听页面滚动document.addEventListener(\"scroll\", function(e) {        var ev = e || window.event;        var height...\n              "},{"title":"渐变色分段能量条样式实现","link":"./notes/渐变色分段能量条样式实现","time":"2020-11-04 21:05:11","tags":["html","分段能量条","css"],"desc":"\n                  渐变色分段能量条效果如下图：实现思路：整根进度条采用渐变色背景；左边起每个小方框设置背景为透明，边框为白色；右边设置一个div白色背景占满空白CSS样式：.container{\twidth: 300px;\tbackground-image:linear-gradient(to right, #23be7b, #fff);\tborder: 1px solid #23be7b;\tdisplay: flex;\tjustify-content: flex-start;\tposi\n              "},{"title":"记录贴——用Jenkins自动化构建部署微信小程序","link":"./notes/记录贴——用Jenkins自动化构建部署微信小程序","time":"2020-10-23 00:39:39","tags":["jenkins","微信小程序","自动化部署"],"desc":"\n                  最近开始接触小程序开发，顺便尝试了一下使用Jenkins对小程序进行自动化构建部署，即：git仓库变更——>jenkins自动构建——>代码上传至微信小程序服务器jenkins监听git仓库自不必多说，主要写一下小程序的miniprogram-ci模块以及在服务器上构建以及上传是遇到的坑1.miniprogram-ci在miniprogram-ci模块出现之前，小程序的代码上传要通过微信开发者工具手动上传。当然，仍然有很多大佬开发出了各种脚本工具实现自动化，但大都还是..\n              "},{"title":"记录贴——echarts图表动态刻度尺的简单实现","link":"./notes/记录贴——echarts图表动态刻度尺的简单实现","time":"2020-10-18 23:58:46","tags":["javascript","echarts","刻度尺","自定义刻度显示"],"desc":"\n                  项目场景：如下图表：问题描述：后端传来的数据单位为bps,需要前端根据数据动态换算到对应的单位换算关系为1024 bps => 1kbps1024 kbps => 1Mbps1024 Mbps => 1Gbps此处换算较为简单，只需一个简单函数实现// 动态计算流量单位export function calcUnit(value){  // 初始单位bps  let unit_arry = ['bps', 'kbps', 'Mbps', 'G\n              "},{"title":"web前端读取串口数据","link":"./notes/web前端读取串口数据","time":"2020-04-22 15:11:43","tags":["js","前端读取串口数据","html","IE","ActiveX"],"desc":"\n                  来自扫码枪应用适配的经验及扩展。查了好多资料，发现实现思路不外乎以下几种：1.使用服务端开发语言开发一个读取串口数据的本地服务模块，并实现websocket长连接支持，前端开启长连接到该服务，根据推送的数据进行操作。2.针对IE浏览器，可以采用ActiveX插件读取串口数据，根据插件的API进行开发。3.对于chrome浏览器，可以使用Chrome.serial实现这几种方式本质区别不大...\n              "},{"title":"CSS布局——圣杯布局、双飞翼布局","link":"./notes/CSS布局——圣杯布局、双飞翼布局","time":"2020-04-22 15:11:43","tags":["CSS","圣杯布局","双飞翼布局","HTML"],"desc":"\n                  圣杯布局和双飞翼布局解决的都是两边顶宽、中间自适应的三栏布局问题，要实现中间部分优先渲染。先上两个demo。圣杯布局：<!DOCTYPE html><html><head>\t<title>圣杯布局</title>\t<meta charset=\"utf-8\">\t<style>\t\t.heade...\n              "},{"title":"JS为元素添加一次性触发事件","link":"./notes/JS为元素添加一次性触发事件","time":"2020-03-29 22:53:21","tags":["js","javascript","一次性事件","事件监听"],"desc":"\n                  可使用arguments的callee属性配合removeEventListener方法实现事件的移除element.addEventListener( \"EventName\", function(){\t//TODO    element.removeEventListener(\"EventName\", arguments.callee);});...\n              "},{"title":"使用css3filter属性实现图片毛玻璃效果","link":"./notes/使用css3filter属性实现图片毛玻璃效果","time":"2019-12-29 22:05:45","tags":["css","图片","毛玻璃","图片虚化"],"desc":"\n                  可用于背景图片的遮盖和虚化处理；img {    filter: url(blur.svg#blur);/* FireFox, Chrome, Opera */    -webkit-filter: blur(5px);/* Chrome, Opera */    -moz-filter: blur(5px);    -ms-filter: blur(5px);    filter...\n              "},{"title":"关于npm依赖包全局安装后报依赖包找不到的解决方法","link":"./notes/关于npm依赖包全局安装后报依赖包找不到的解决方法","time":"2019-12-24 22:36:26","tags":["node","全局依赖","环境变量"],"desc":"\n                  npm全局安装命令npm install -g <package_name>如果安装之后仍然报依赖包找不到，原因大概率是未配置npm依赖包的环境变量配置方法：1.Windows环境增加环境变量 NODE_PATH 指向到全局包的安装路径关于全局包的安装路径，默认路径为C盘用户目录下C:\\Users\\用户名\\AppData\\Roaming\\npm\\node_mo...\n              "},{"title":"JSCSS实现页面滚动切换图片（从边角扩散）的效果","link":"./notes/JSCSS实现页面滚动切换图片（从边角扩散）的效果","time":"2019-12-17 22:32:37","tags":["JS","CSS","图片滚动切换"],"desc":"\n                  先上效果图：实现思路：两个绝对定位的div重合，通过监听页面滚动位置信息，动态的改变上面的div宽高、背景定位、边角半径div样式设计:.bgTrans {        height: 400px;        position: relative;    }    .bgTrans div {        position: absolute;    ...\n              "},{"title":"JSCSS实现漂亮的日历特效（仿win10系统日历）","link":"./notes/JSCSS实现漂亮的日历特效（仿win10系统日历）","time":"2019-12-12 23:51:17","tags":["JS","CSS","日历","win10"],"desc":"\n                  初衷：无意见发现win10的系统日鼠标悬浮的特效非常好看，想尝试一下用CSS和JS实现一下。先上一下目前实现的效果图：难点是这种间隔效果和鼠标移动效果的实现，如下图间隔效果的实现我采用了background-clip: content-box;padding: 2px;background-color: gray;border: 1px solid gray;样...\n              "},{"title":"兼容IE8的多文件上传实现","link":"./notes/兼容IE8的多文件上传实现","time":"2019-12-11 23:40:11","tags":["JS","多文件上传","ie8"],"desc":"\n                  兼容IE8的注意点：原生多文件属性multiple只在IE10/11上有效，IE8不兼容无法使用\tformdata对象同样只支持在IE10/11，IE8无法使用\t很多API在IE8上无法使用，同样是兼容的难点\tIE8的安全机制，使一些操作无法实现本文使用原生JS对文件进行简单处理实现多文件上传，未使用其他插件。实现思路：由于multiple属性无法使用，采取通过增加input框...\n              "},{"title":"JSCSS实现按钮点击波纹扩散效果","link":"./notes/JSCSS实现按钮点击波纹扩散效果","time":"2019-12-09 23:05:03","tags":["JS","CSS","按钮特效"],"desc":"\n                  实现点击时按钮背景为动态扩散的波纹效果。效果图如下：页面代码：<!DOCTYPE html><html><head>\t<title>按钮点击特效</title></head><style>\tinput[type=button]{\t    outline: none;\t    hei...\n              "},{"title":"js实现手动滑动条","link":"./notes/js实现手动滑动条","time":"2018-08-15 00:39:30","tags":["js","html","滑动条"],"desc":"\n                  效果如下图所示：滑动效果如下图： 样例页面代码如下：&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;    &lt;meta charset=\"UTF-8\"&gt;    &lt;title&gt;test&lt;/title&gt;    &lt;style&g\n              "},{"title":"JS简易实现导航栏滑到顶部固定","link":"./notes/JS简易实现导航栏滑到顶部固定","time":"2018-08-09 00:07:49","tags":["jquery","导航栏固定"],"desc":"\n                  适用场景如下图所示：适用于导航栏顶部有滑动时需要隐藏的内容。实现思路：利用position:fix 的css属性能够实现元素固定在屏幕的某一位置，配合 top:0px;可实现将导航栏固定在顶部。故，可通过JS监听屏幕的滚动，当导航栏滚动到屏幕顶部时，修改导航栏的position属性。简易DEMO代码如下：&lt;!-- 此处引入百度的cdn,方便调试 --&gt;&lt...\n              "},{"title":"Leanote——搭建自己的私人笔记服务器","link":"./notes/Leanote——搭建自己的私人笔记服务器","time":"2018-08-07 17:29:26","tags":["leanote"],"desc":"\n                  话说好记性不如烂笔头，把平常遇到的问题通过笔记记下来对于程序猿来说实在是太有用了，找了一些笔记软件，除了oneNote,大多数都不免费提供云端同步功能。然而微软的服务器感觉速度实在太慢，而且不支持markdown功能。最后让我找到了leanote,这是一个开源的笔记框架，你可以将它搭建在自己的服务器上。客户端支持windows/Mac/Linux/Android/IOS ,实在是相当强大。最关...\n              "}]